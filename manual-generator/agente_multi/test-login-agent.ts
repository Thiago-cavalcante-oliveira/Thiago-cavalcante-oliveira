import { LoginAgent } from './agents/LoginAgent';
import { TaskData, TaskResult } from './core/AgnoSCore';
import { Browser, chromium } from 'playwright';

async function testLoginAgent() {
    console.log('üîê TESTE DO LOGIN AGENT');
    console.log('='.repeat(50));
    
    const loginAgent = new LoginAgent();
    let browser: Browser | null = null;
    
    const testUrl = 'https://saeb-h1.pmfi.pr.gov.br/';
    const credentials = {
        username: 'admin',
        password: 'admin123'
    };
    
    try {
        console.log(`üåê Testando login em: ${testUrl}`);
        console.log(`üë§ Usu√°rio: ${credentials.username}`);
        console.log(`üîë Senha: ${'*'.repeat(credentials.password.length)}`);
        
        // Inicializar o agente
        await loginAgent.initialize();
        
        // Criar browser e p√°gina (modo visual para acompanhar as a√ß√µes)
        browser = await chromium.launch({ 
            headless: false,
            slowMo: 1000, // Adiciona delay entre a√ß√µes para melhor visualiza√ß√£o
            args: ['--start-maximized'] // Inicia maximizado
        });
        const context = await browser.newContext();
        const page = await context.newPage();
        
        // Navegar para a URL de teste
        console.log(`üåê Navegando para: ${testUrl}`);
        await page.goto(testUrl, { waitUntil: 'networkidle' });
        
        // Configurar p√°gina no agente
        loginAgent.setPage(page);
        
        const startTime = Date.now();
        
        // Criar task data para o agente
        const taskData: TaskData = {
            id: 'test-login-' + Date.now(),
            type: 'authenticate',
            data: {
                page: page, // Incluir a p√°gina no data
                credentials: {
                    ...credentials,
                    loginUrl: testUrl // Incluir a URL de login
                },
                targetUrl: testUrl,
                authConfig: {
                    type: 'basic',
                    credentials: credentials
                }
            },
            sender: 'test-runner',
            timestamp: new Date(),
            priority: 'high'
        };
        
        const result: TaskResult = await loginAgent.processTask(taskData);
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        console.log('\nüìä RESULTADO DO LOGIN:');
        console.log('-'.repeat(30));
        console.log(`‚úÖ Status: ${result.success ? 'SUCESSO' : 'FALHA'}`);
        console.log(`‚è±Ô∏è Tempo: ${duration}ms`);
        console.log(`üìù Erro: ${result.error || 'N/A'}`);
        console.log(`‚è±Ô∏è Tempo de processamento: ${result.processingTime}ms`);
        
        if (result.data) {
            console.log('\nüìã DADOS RETORNADOS:');
            console.log('-'.repeat(20));
            console.log(JSON.stringify(result.data, null, 2));
        }
        
        if (result.markdownReport) {
            console.log('\nüìÑ RELAT√ìRIO MARKDOWN GERADO:');
            console.log('-'.repeat(30));
            console.log(result.markdownReport.substring(0, 500) + '...');
        }
        
        console.log('\n' + '='.repeat(50));
        console.log(result.success ? '‚úÖ LOGIN AGENT TESTE CONCLU√çDO COM SUCESSO!' : '‚ùå LOGIN AGENT TESTE FALHOU!');
        
    } catch (error: unknown) {
        console.error('‚ùå ERRO NO TESTE DO LOGIN AGENT:', error);
        console.log('\nüìã DETALHES DO ERRO:');
        console.log('-'.repeat(20));
        if (error instanceof Error) {
            console.log(`Tipo: ${error.constructor.name}`);
            console.log(`Mensagem: ${error.message}`);
            if (error.stack) {
                console.log(`Stack: ${error.stack.split('\n').slice(0, 3).join('\n')}`);
            }
        } else {
            console.log(`Erro desconhecido: ${String(error)}`);
        }
    } finally {
        if (browser) {
            await browser.close();
        }
        await loginAgent.cleanup();
        console.log('\nüßπ Recursos do LoginAgent liberados');
    }
}

// Executar o teste
testLoginAgent().catch(console.error);